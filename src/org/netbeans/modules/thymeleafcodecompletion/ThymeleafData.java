package org.netbeans.modules.thymeleafcodecompletion;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;

/**
 * Thymeleaf attributes and documentation
 *
 * @author Artur Wi≈õniewski
 *
 */
public class ThymeleafData {

    /**
     * Array of Thymeleaf attributes.
     *
     */
    private static final String[] THYMELEAF_ATTRIBUTES = {
        "xmlns:th=\"http://www.thymeleaf.org\"",
        "xmlns=\"http://www.w3.org/1999/xhtml\"",
        "xmlns:sec=\"http://www.thymeleaf.org/thymeleaf-extras-springsecurity3\"",
        "xmlns:sec=\"http://www.thymeleaf.org/thymeleaf-extras-springsecurity4\"",
        "layout:decorator",
        "layout:fragment",
        "layout:include",
        "layout:replace",
        "th:abbr",
        "th:accept",
        "th:accept-charset",
        "th:accesskey",
        "th:action",
        "th:align",
        "th:alt",
        "th:alt-title",
        "th:archive",
        "th:assert",
        "th:async",
        "th:attr",
        "th:attrappend",
        "th:attrprepend",
        "th:audio",
        "th:autocomplete",
        "th:autofocus",
        "th:autoplay",
        "th:axis",
        "th:background",
        "th:bgcolor",
        "th:border",
        "th:block", //none in eclipse plugin
        "th:case",
        "th:cellpadding",
        "th:cellspacing",
        "th:challenge",
        "th:charset",
        "th:checked",
        "th:cite",
        "th:class",
        "th:classappend",
        "th:classid",
        "th:codebase",
        "th:codetype",
        "th:cols",
        "th:colspan",
        "th:compact",
        "th:content",
        "th:contenteditable",
        "th:contextmenu",
        "th:controls",
        "th:data",
        "th:datetime",
        "th:declare",
        "th:default",
        "th:defer",
        "th:dir",
        "th:disabled",
        "th:draggable",
        "th:dropzone",
        "th:each",
        "th:enctype",
        "th:for",
        "th:form",
        "th:formaction",
        "th:formenctype",
        "th:formmethod",
        "th:formnovalidate",
        "th:formtarget",
        "th:fragment",
        "th:frame",
        "th:frameborder",
        "th:headers",
        "th:height",
        "th:hidden",
        "th:high",
        "th:href",
        "th:hreflang",
        "th:hspace",
        "th:http-equiv",
        "th:icon",
        "th:id",
        "th:if",
        "th:include",
        "th:inline",
        "th:insert", //thymeleaf ver 3
        "th:ismap",
        "th:keytype",
        "th:kind",
        "th:label",
        "th:lang",
        "th:lang-xmllang",
        "th:list",
        "th:longdesc",
        "th:loop",
        "th:low",
        "th:manifest",
        "th:marginheight",
        "th:marginwidth",
        "th:max",
        "th:maxlength",
        "th:media",
        "th:method",
        "th:min",
        "th:multiple",
        "th:name",
        "th:novalidate",
        "th:nowarp",
        "th:object",
        "th:onabort",
        "th:onafterprint",
        "th:onbeforeprint",
        "th:onbeforeunload",
        "th:onblur",
        "th:oncanplay",
        "th:oncanplaythrough",
        "th:onchange",
        "th:onclick",
        "th:oncontextmenu",
        "th:ondblclick",
        "th:ondrag",
        "th:ondragend",
        "th:ondragenter",
        "th:ondragleave",
        "th:ondragover",
        "th:ondragstart",
        "th:ondrop",
        "th:ondurationchange",
        "th:onemptied",
        "th:onended",
        "th:onerror",
        "th:onfocus",
        "th:onformchange",
        "th:onforminput",
        "th:onhashchange",
        "th:oninput",
        "th:oninvalid",
        "th:onkeydown",
        "th:onkeypress",
        "th:onkeyup",
        "th:onload",
        "th:onloadeddata",
        "th:onloadedmetadata",
        "th:onloadstart",
        "th:onmessage",
        "th:onmousedown",
        "th:onmousemove",
        "th:onmouseout",
        "th:onmouseover",
        "th:onmouseup",
        "th:onmousewheel",
        "th:onoffline",
        "th:ononline",
        "th:onpause",
        "th:onplay",
        "th:onplaying",
        "th:onpopstate",
        "th:onprogress",
        "th:onratechange",
        "th:onreadystatechange",
        "th:onredo",
        "th:onreset",
        "th:onresize",
        "th:onscroll",
        "th:onseeked",
        "th:onseeking",
        "th:onselect",
        "th:onshow",
        "th:onstalled",
        "th:onstorage",
        "th:onsubmit",
        "th:onsuspend",
        "th:ontimeupdate",
        "th:onundo",
        "th:onunload",
        "th:onvolumechange",
        "th:onwaiting",
        "th:open",
        "th:optimum",
        "th:pattern",
        "th:placeholder",
        "th:poster",
        "th:preload",
        "th:pubdate",
        "th:radiogroup",
        "th:readonly",
        "th:rel",
        "th:remove",
        "th:replace",
        "th:required",
        "th:rev",
        "th:reversed",
        "th:rows",
        "th:rowspan",
        "th:rules",
        "th:sandbox",
        "th:scheme",
        "th:scope",
        "th:scoped",
        "th:scrolling",
        "th:seamless",
        "th:selected",
        "th:size",
        "th:sizes",
        "th:span",
        "th:spellcheck",
        "th:src",
        "th:srclang",
        "th:standby",
        "th:start",
        "th:step",
        "th:style",
        "th:styleappend",
        "th:substituteby",
        "th:summary",
        "th:switch",
        "th:tabindex",
        "th:target",
        "th:text",
        "th:title",
        "th:type",
        "th:unless",
        "th:usemap",
        "th:utext",
        "th:value",
        "th:valuetype",
        "th:vspace",
        "th:width",
        "th:with",
        "th:wrap",
        "th:xmlbase",
        "th:xmllang",
        "th:xmlspace",
        "data-layout-decorator",
        "data-layout-fragment",
        "data-layout-include",
        "data-layout-replace",
        "data-th-abbr",
        "data-th-accept",
        "data-th-accept-charset",
        "data-th-accesskey",
        "data-th-action",
        "data-th-align",
        "data-th-alt",
        "data-th-alt-title",
        "data-th-archive",
        "data-th-assert",
        "data-th-async",
        "data-th-attr",
        "data-th-attrappend",
        "data-th-attrprepend",
        "data-th-audio",
        "data-th-autocomplete",
        "data-th-autofocus",
        "data-th-autoplay",
        "data-th-axis",
        "data-th-background",
        "data-th-bgcolor",
        "data-th-border",
        "data-th-block", //none in eclipse plugin
        "data-th-case",
        "data-th-cellpadding",
        "data-th-cellspacing",
        "data-th-challenge",
        "data-th-charset",
        "data-th-checked",
        "data-th-cite",
        "data-th-class",
        "data-th-classappend",
        "data-th-classid",
        "data-th-codebase",
        "data-th-codetype",
        "data-th-cols",
        "data-th-colspan",
        "data-th-compact",
        "data-th-content",
        "data-th-contenteditable",
        "data-th-contextmenu",
        "data-th-controls",
        "data-th-data",
        "data-th-datetime",
        "data-th-declare",
        "data-th-default",
        "data-th-defer",
        "data-th-dir",
        "data-th-disabled",
        "data-th-draggable",
        "data-th-dropzone",
        "data-th-each",
        "data-th-enctype",
        "data-th-for",
        "data-th-form",
        "data-th-formaction",
        "data-th-formenctype",
        "data-th-formmethod",
        "data-th-formnovalidate",
        "data-th-formtarget",
        "data-th-fragment",
        "data-th-frame",
        "data-th-frameborder",
        "data-th-headers",
        "data-th-height",
        "data-th-hidden",
        "data-th-high",
        "data-th-href",
        "data-th-hreflang",
        "data-th-hspace",
        "data-th-http-equiv",
        "data-th-icon",
        "data-th-id",
        "data-th-if",
        "data-th-include",
        "data-th-inline",
        "data-th-insert", //thymeleaf ver 3
        "data-th-ismap",
        "data-th-keytype",
        "data-th-kind",
        "data-th-label",
        "data-th-lang",
        "data-th-lang-xmllang",
        "data-th-list",
        "data-th-longdesc",
        "data-th-loop",
        "data-th-low",
        "data-th-manifest",
        "data-th-marginheight",
        "data-th-marginwidth",
        "data-th-max",
        "data-th-maxlength",
        "data-th-media",
        "data-th-method",
        "data-th-min",
        "data-th-multiple",
        "data-th-name",
        "data-th-novalidate",
        "data-th-nowarp",
        "data-th-object",
        "data-th-onabort",
        "data-th-onafterprint",
        "data-th-onbeforeprint",
        "data-th-onbeforeunload",
        "data-th-onblur",
        "data-th-oncanplay",
        "data-th-oncanplaythrough",
        "data-th-onchange",
        "data-th-onclick",
        "data-th-oncontextmenu",
        "data-th-ondblclick",
        "data-th-ondrag",
        "data-th-ondragend",
        "data-th-ondragenter",
        "data-th-ondragleave",
        "data-th-ondragover",
        "data-th-ondragstart",
        "data-th-ondrop",
        "data-th-ondurationchange",
        "data-th-onemptied",
        "data-th-onended",
        "data-th-onerror",
        "data-th-onfocus",
        "data-th-onformchange",
        "data-th-onforminput",
        "data-th-onhashchange",
        "data-th-oninput",
        "data-th-oninvalid",
        "data-th-onkeydown",
        "data-th-onkeypress",
        "data-th-onkeyup",
        "data-th-onload",
        "data-th-onloadeddata",
        "data-th-onloadedmetadata",
        "data-th-onloadstart",
        "data-th-onmessage",
        "data-th-onmousedown",
        "data-th-onmousemove",
        "data-th-onmouseout",
        "data-th-onmouseover",
        "data-th-onmouseup",
        "data-th-onmousewheel",
        "data-th-onoffline",
        "data-th-ononline",
        "data-th-onpause",
        "data-th-onplay",
        "data-th-onplaying",
        "data-th-onpopstate",
        "data-th-onprogress",
        "data-th-onratechange",
        "data-th-onreadystatechange",
        "data-th-onredo",
        "data-th-onreset",
        "data-th-onresize",
        "data-th-onscroll",
        "data-th-onseeked",
        "data-th-onseeking",
        "data-th-onselect",
        "data-th-onshow",
        "data-th-onstalled",
        "data-th-onstorage",
        "data-th-onsubmit",
        "data-th-onsuspend",
        "data-th-ontimeupdate",
        "data-th-onundo",
        "data-th-onunload",
        "data-th-onvolumechange",
        "data-th-onwaiting",
        "data-th-open",
        "data-th-optimum",
        "data-th-pattern",
        "data-th-placeholder",
        "data-th-poster",
        "data-th-preload",
        "data-th-pubdate",
        "data-th-radiogroup",
        "data-th-readonly",
        "data-th-rel",
        "data-th-remove",
        "data-th-replace",
        "data-th-required",
        "data-th-rev",
        "data-th-reversed",
        "data-th-rows",
        "data-th-rowspan",
        "data-th-rules",
        "data-th-sandbox",
        "data-th-scheme",
        "data-th-scope",
        "data-th-scoped",
        "data-th-scrolling",
        "data-th-seamless",
        "data-th-selected",
        "data-th-size",
        "data-th-sizes",
        "data-th-span",
        "data-th-spellcheck",
        "data-th-src",
        "data-th-srclang",
        "data-th-standby",
        "data-th-start",
        "data-th-step",
        "data-th-style",
        "data-th-styleappend",
        "data-th-substituteby",
        "data-th-summary",
        "data-th-switch",
        "data-th-tabindex",
        "data-th-target",
        "data-th-text",
        "data-th-title",
        "data-th-type",
        "data-th-unless",
        "data-th-usemap",
        "data-th-utext",
        "data-th-value",
        "data-th-valuetype",
        "data-th-vspace",
        "data-th-width",
        "data-th-with",
        "data-th-wrap",
        "data-th-xmlbase",
        "data-th-xmllang",
        "data-th-xmlspace"
    };
    /**
     * Array of thymeleaf methods
     */
    private static final String[] THYMELEAF_METHODS = {
        "#aggregates.avg()",
        "#aggregates.sum()",
        "#arrays.contains()",
        "#arrays.containsAll()",
        "#arrays.empty",
        "#arrays.length()",
        "#arrays.toArray()",
        "#arrays.toBooleanArray()",
        "#arrays.toDoubleArray()",
        "#arrays.toFloatArray()",
        "#arrays.toIntegerArray()",
        "#arrays.toLongArray()",
        "#arrays.toStringArray()",
        "#bools.and",
        "#bools.arrayAnd()",
        "#bools.arrayIsFalse()",
        "#bools.arrayIsTrue()",
        "#bools.arrayOr()",
        "#bools.false",
        "#bools.isFalse",
        "#bools.isTrue",
        "#bools.listAnd()",
        "#bools.listIsFalse()",
        "#bools.listIsTrue()",
        "#bools.listOr()",
        "#bools.or",
        "#bools.true",
        "#calendars.arrayDay()",
        "#calendars.arrayDayOfWeek()",
        "#calendars.arrayDayOfWeekName()",
        "#calendars.arrayDayOfWeekNameShort()",
        "#calendars.arrayFormat()",
        "#calendars.arrayFormatISO()",
        "#calendars.arrayHour()",
        "#calendars.arrayMillisecond()",
        "#calendars.arrayMinute()",
        "#calendars.arrayMonth()",
        "#calendars.arrayMonthName()",
        "#calendars.arrayMonthNameShort()",
        "#calendars.arraySecond()",
        "#calendars.arrayYear()",
        "#calendars.create()",
        "#calendars.createForTimeZone()",
        "#calendars.createNow()",
        "#calendars.createNowForTimeZone()",
        "#calendars.createToday()",
        "#calendars.createTodayForTimeZone()",
        "#calendars.day()",
        "#calendars.dayOfWeek()",
        "#calendars.dayOfWeekName()",
        "#calendars.dayOfWeekNameShort()",
        "#calendars.format()",
        "#calendars.formatISO()",
        "#calendars.hour()",
        "#calendars.listDay()",
        "#calendars.listDayOfWeek()",
        "#calendars.listDayOfWeekName()",
        "#calendars.listDayOfWeekNameShort()",
        "#calendars.listFormat()",
        "#calendars.listFormatISO()",
        "#calendars.listHour()",
        "#calendars.listMillisecond()",
        "#calendars.listMinute()",
        "#calendars.listMonth()",
        "#calendars.listMonthName()",
        "#calendars.listMonthNameShort()",
        "#calendars.listSecond()",
        "#calendars.listYear()",
        "#calendars.millisecond()",
        "#calendars.minute()",
        "#calendars.month()",
        "#calendars.monthName()",
        "#calendars.monthNameShort()",
        "#calendars.second()",
        "#calendars.year()",
        "#ctx.addContextExecutionInfo()",
        "#ctx.locale",
        "#ctx.variables",
        "#dates.arrayDay()",
        "#dates.arrayDayOfWeek()",
        "#dates.arrayDayOfWeekName()",
        "#dates.arrayDayOfWeekNameShort()",
        "#dates.arrayFormat()",
        "#dates.arrayFormatISO()",
        "#dates.arrayHour()",
        "#dates.arrayMillisecond()",
        "#dates.arrayMinute()",
        "#dates.arrayMonth()",
        "#dates.arrayMonthName()",
        "#dates.arrayMonthNameShort()",
        "#dates.arraySecond()",
        "#dates.arrayYear()",
        "#dates.create()",
        "#dates.createNow()",
        "#dates.createNowForTimeZone()",
        "#dates.createToday()",
        "#dates.createTodayForTimeZone()",
        "#dates.day()",
        "#dates.dayOfWeek()",
        "#dates.dayOfWeekName()",
        "#dates.dayOfWeekNameShort()",
        "#dates.format()",
        "#dates.formatISO()",
        "#dates.hour()",
        "#dates.listDay()",
        "#dates.listDayOfWeek()",
        "#dates.listDayOfWeekName()",
        "#dates.listDayOfWeekNameShort()",
        "#dates.listFormat()",
        "#dates.listFormatISO()",
        "#dates.listHour()",
        "#dates.listMillisecond()",
        "#dates.listMinute()",
        "#dates.listMonth()",
        "#dates.listMonthName()",
        "#dates.listMonthNameShort()",
        "#dates.listSecond()",
        "#dates.listYear()",
        "#dates.millisecond()",
        "#dates.minute()",
        "#dates.month()",
        "#dates.monthName()",
        "#dates.monthNameShort()",
        "#dates.second()",
        "#dates.year()",
        "#httpServletRequest.authType",
        "#httpServletRequest.authenticate()",
        "#httpServletRequest.changeSessionId()",
        "#httpServletRequest.contextPath",
        "#httpServletRequest.cookies",
        "#httpServletRequest.dateHeader",
        "#httpServletRequest.header",
        "#httpServletRequest.headerNames",
        "#httpServletRequest.headers",
        "#httpServletRequest.intHeader",
        "#httpServletRequest.login()",
        "#httpServletRequest.logout()",
        "#httpServletRequest.method",
        "#httpServletRequest.part",
        "#httpServletRequest.parts",
        "#httpServletRequest.pathInfo",
        "#httpServletRequest.pathTranslated",
        "#httpServletRequest.queryString",
        "#httpServletRequest.remoteUser",
        "#httpServletRequest.requestURI",
        "#httpServletRequest.requestURL",
        "#httpServletRequest.requestedSessionId",
        "#httpServletRequest.requestedSessionIdFromCookie",
        "#httpServletRequest.requestedSessionIdFromURL",
        "#httpServletRequest.requestedSessionIdFromUrl",
        "#httpServletRequest.requestedSessionIdValid",
        "#httpServletRequest.servletPath",
        "#httpServletRequest.session",
        "#httpServletRequest.upgrade()",
        "#httpServletRequest.userInRole",
        "#httpServletRequest.userPrincipal",
        "#httpSession.attribute",
        "#httpSession.attributeNames",
        "#httpSession.creationTime",
        "#httpSession.id",
        "#httpSession.invalidate()",
        "#httpSession.lastAccessedTime",
        "#httpSession.maxInactiveInterval",
        "#httpSession.new",
        "#httpSession.putValue()",
        "#httpSession.removeAttribute()",
        "#httpSession.removeValue()",
        "#httpSession.servletContext",
        "#httpSession.sessionContext",
        "#httpSession.value",
        "#httpSession.valueNames",
        "#ids.next()",
        "#ids.prev()",
        "#ids.seq()",
        "#lists.contains()",
        "#lists.containsAll()",
        "#lists.empty",
        "#lists.size()",
        "#lists.sort()",
        "#lists.toList()",
        "#locale.<clinit>()",
        "#locale.access$600()",
        "#locale.access$700()",
        "#locale.access$800()",
        "#locale.availableLocales",
        "#locale.baseLocale",
        "#locale.clone()",
        "#locale.compatibilityExtensions",
        "#locale.composeList()",
        "#locale.convertOldISOCodes()",
        "#locale.country",
        "#locale.createConstant()",
        "#locale.default",
        "#locale.displayCountry",
        "#locale.displayLanguage",
        "#locale.displayName",
        "#locale.displayScript",
        "#locale.displayString",
        "#locale.displayVariant",
        "#locale.displayVariantArray",
        "#locale.equals()",
        "#locale.extension",
        "#locale.extensionKeys",
        "#locale.filter()",
        "#locale.filterTags()",
        "#locale.forLanguageTag()",
        "#locale.formatList()",
        "#locale.hasExtensions()",
        "#locale.hashCode()",
        "#locale.iSO2Table",
        "#locale.iSO3Code",
        "#locale.iSO3Country",
        "#locale.iSO3Language",
        "#locale.iSOCountries",
        "#locale.iSOLanguages",
        "#locale.initDefault()",
        "#locale.instance",
        "#locale.language",
        "#locale.localeExtensions",
        "#locale.lookup()",
        "#locale.lookupTag()",
        "#locale.readObject()",
        "#locale.readResolve()",
        "#locale.script",
        "#locale.stripExtensions()",
        "#locale.toLanguageTag()",
        "#locale.toString()",
        "#locale.unicodeExtensionKey",
        "#locale.unicodeLocaleAttributes",
        "#locale.unicodeLocaleKeys",
        "#locale.unicodeLocaleType",
        "#locale.variant",
        "#locale.writeObject()",
        "#maps.containsAllKeys()",
        "#maps.containsAllValues()",
        "#maps.containsKey()",
        "#maps.containsValue()",
        "#maps.empty",
        "#maps.size()",
        "#messages.<clinit>()",
        "#messages.arrayMsg()",
        "#messages.arrayMsgOrNull()",
        "#messages.arrayMsgOrNullWithParams()",
        "#messages.arrayMsgWithParams()",
        "#messages.doMsg()",
        "#messages.listMsg()",
        "#messages.listMsgOrNull()",
        "#messages.listMsgOrNullWithParams()",
        "#messages.listMsgWithParams()",
        "#messages.msg()",
        "#messages.msgOrNull()",
        "#messages.msgOrNullWithParams()",
        "#messages.msgWithParams()",
        "#numbers.arrayFormatDecimal()",
        "#numbers.arrayFormatInteger()",
        "#numbers.formatDecimal()",
        "#numbers.formatInteger()",
        "#numbers.listFormatDecimal()",
        "#numbers.listFormatInteger()",
        "#numbers.sequence()",
        "#objects.arrayNullSafe()",
        "#objects.listNullSafe()",
        "#objects.nullSafe()",
        "#root.<clinit>()",
        "#root.clone()",
        "#root.get()",
        "#root.restrictions",
        "#sets.contains()",
        "#sets.containsAll()",
        "#sets.empty",
        "#sets.size()",
        "#sets.toSet()",
        "#strings.abbreviate()",
        "#strings.append()",
        "#strings.arrayAbbreviate()",
        "#strings.arrayAppend()",
        "#strings.arrayCapitalize()",
        "#strings.arrayCapitalizeWords()",
        "#strings.arrayContains()",
        "#strings.arrayContainsIgnoreCase()",
        "#strings.arrayDefaultString()",
        "#strings.arrayEndsWith()",
        "#strings.arrayEscapeJava()",
        "#strings.arrayEscapeJavaScript()",
        "#strings.arrayEscapeXml()",
        "#strings.arrayIndexOf()",
        "#strings.arrayIsEmpty()",
        "#strings.arrayJoin()",
        "#strings.arrayLength()",
        "#strings.arrayMultipleReplace()",
        "#strings.arrayPrepend()",
        "#strings.arrayReplace()",
        "#strings.arraySplit()",
        "#strings.arrayStartsWith()",
        "#strings.arraySubstring()",
        "#strings.arraySubstringAfter()",
        "#strings.arraySubstringBefore()",
        "#strings.arrayToLowerCase()",
        "#strings.arrayToString()",
        "#strings.arrayToUpperCase()",
        "#strings.arrayTrim()",
        "#strings.arrayUnCapitalize()",
        "#strings.arrayUnescapeJava()",
        "#strings.arrayUnescapeJavaScript()",
        "#strings.capitalize()",
        "#strings.capitalizeWords()",
        "#strings.concat()",
        "#strings.concatReplaceNulls()",
        "#strings.contains()",
        "#strings.containsIgnoreCase()",
        "#strings.defaultString()",
        "#strings.empty",
        "#strings.endsWith()",
        "#strings.equals()",
        "#strings.equalsIgnoreCase()",
        "#strings.escapeJava()",
        "#strings.escapeJavaScript()",
        "#strings.escapeXml()",
        "#strings.indexOf()",
        "#strings.isEmpty",
        "#strings.join",
        "#strings.length()",
        "#strings.listAbbreviate()",
        "#strings.listAppend()",
        "#strings.listCapitalize()",
        "#strings.listCapitalizeWords()",
        "#strings.listContains()",
        "#strings.listContainsIgnoreCase()",
        "#strings.listDefaultString()",
        "#strings.listEndsWith()",
        "#strings.listEscapeJava()",
        "#strings.listEscapeJavaScript()",
        "#strings.listEscapeXml()",
        "#strings.listIndexOf()",
        "#strings.listIsEmpty()",
        "#strings.listJoin()",
        "#strings.listLength()",
        "#strings.listMultipleReplace()",
        "#strings.listPrepend()",
        "#strings.listReplace()",
        "#strings.listSplit()",
        "#strings.listStartsWith()",
        "#strings.listSubstring()",
        "#strings.listSubstringAfter()",
        "#strings.listSubstringBefore()",
        "#strings.listToLowerCase()",
        "#strings.listToString()",
        "#strings.listToUpperCase()",
        "#strings.listTrim()",
        "#strings.listUnCapitalize()",
        "#strings.listUnescapeJava()",
        "#strings.listUnescapeJavaScript()",
        "#strings.multipleReplace()",
        "#strings.prepend()",
        "#strings.randomAlphanumeric()",
        "#strings.repeat()",
        "#strings.replace()",
        "#strings.split",
        "#strings.startsWith()",
        "#strings.substring()",
        "#strings.substringAfter()",
        "#strings.substringBefore()",
        "#strings.toLowerCase()",
        "#strings.toString()",
        "#strings.toUpperCase()",
        "#strings.trim()",
        "#strings.unCapitalize()",
        "#strings.unescapeJava()",
        "#strings.unescapeJavaScript()",
        "#vars.<clinit>()",
        "#vars.clone()",
        "#vars.get()",
        "#vars.restrictions"
    };

    /**
     * Mapping doc to attributes
     */
    private static final HashMap<String, String> DOCUMENTATION = new HashMap<String, String>();

    static {
        DOCUMENTATION.put("th:alt", "Sets the <b>alt</b> attribute to the result of the expression.<br><br><i>See also:</i> <code>th:alt-title</code>");
        DOCUMENTATION.put("th:alt-title", "Sets both the <b>alt</b> and <b>title</b> attributes.");
        DOCUMENTATION.put("th:assert", "A comma-separated list of expressions which should be evaluated and produce true for every evaluation, raising an exception if not.");
        DOCUMENTATION.put("th:attr", "Redefine any attribute of the tag.<br><br><i>See also:</i> <code>th:attrappend</code>, <code>th:attrprepend</code>");
        DOCUMENTATION.put("th:attrappend", "Append the evaluated expression to an existing attribute.<br><br><i>See also:</i> <code>th:attr</code>, <code>th:attrprepend</code>, <code>th:classappend</code>");
        DOCUMENTATION.put("th:attrprepend", "Prepend the evaluated expression to an existing attribute.<br><br><i>See also:</i> <code>th:attr</code>, <code>th:attrappend</code>");
        DOCUMENTATION.put("th:case", "Marks a conditional tag in a <code>th:switch</code> construct.<br><br><i>See also:</i> <code>th:switch</code>");
        DOCUMENTATION.put("th:classappend", "Append the evaluated expression to the <b>class</b> attribute.<br><br><i>See also:</i> <code>th:attrappend</code>, <code>th:class</code>");
        DOCUMENTATION.put("th:each", "Iterate an <i>iter variable</i> over an <i>iterated expression</i>");
        DOCUMENTATION.put("th:fragment", "Mark a tag and its content as a fragment.<br><br><i>See also:</i> <code>th:include</code>, <code>th:substituteby</code>");
        DOCUMENTATION.put("th:if", "Show tag when expression evaluates to true.<br><br><i>See also:</i> <code>th:unless</code>");
        DOCUMENTATION.put("th:include", "Substitute the content of the tag with the referenced fragment.<br><br><i>See also:</i> <code>th:replace</code>, <code>th:substituteby</code>, <code>th:fragment</code>");
        DOCUMENTATION.put("th:inline", "Define inlining mode.<br><br>Possible value(s): <code>text</code>, <code>javascript</code>, <code>dart</code>");
        DOCUMENTATION.put("th:insert", "Inserts a fragment.<br><br><i>See also:</i> <code>th:replace</code>, <code>th:fragment</code><br><br><i>Since:</i> Thymeleaf 3.0");
        DOCUMENTATION.put("th:lang", "Sets the <b>lang</b> attribute to the result of the expression.<br><br><i>See also:</i> <code>th:lang-xmllang</code>");
        DOCUMENTATION.put("th:lang-xmllang", "Sets both the <b>lang</b> and <b>xml:lang</b> attributes.");
        DOCUMENTATION.put("th:object", "Define a selected object for asterisk syntax expressions.<br><br><i>See also:</i> <code>th:with</code>");
        DOCUMENTATION.put("th:remove", "Removes tag and/or content.<br><br>Possible value(s): <code>all</code>, <code>body</code>, <code>tag</code>, <code>all-but-first</code>");
        DOCUMENTATION.put("th:replace", "Replace tag with a fragment.<br><br><i>See also:</i> <code>th:include</code>, <code>th:fragment</code>");
        DOCUMENTATION.put("th:styleappend", "Append the evaluated expression to the <b>style</b> attribute.<br><br><i>See also:</i> <code>th:attrappend</code>, <code>th:style</code>");
        DOCUMENTATION.put("th:substituteby", "Deprecated, use <code>th:replace</code> instead.");
        DOCUMENTATION.put("th:switch", "Multiple conditional switch.<br><br><i>See also:</i> <code>th:case</code>, <code>th:if</code>");
        DOCUMENTATION.put("th:text", "Replaces tag content with HTML escaped value of expression.<br><br><i>See also:</i> <code>th:utext</code>");
        DOCUMENTATION.put("th:title", "Sets the <b>title</b> attribute to the result of the expression.<br><br><i>See also:</i> <code>th:alt-title</code>");
        DOCUMENTATION.put("th:unless", "Hide tag when expression evaluates to true.<br><br><i>See also:</i> <code>th:if</code>");
        DOCUMENTATION.put("th:utext", "Replaces tag content with HTML unescaped value of expression.<br><br><i>See also:</i> <code>th:text</code>");
        DOCUMENTATION.put("th:with", "Creates local variables.<br><br><i>See also:</i> <code>th:object</code>");
        DOCUMENTATION.put("th:xmlbase", "Sets the <b>xml:base</b> attribute to the result of the expression.<br><br><i>See also:</i> <code>th:xmllang</code>, <code>th:xmlspace</code>");
        DOCUMENTATION.put("th:xmllang", "Sets the <b>xml:lang</b> attribute to the result of the expression.<br><br><i>See also:</i> <code>th:xmlbase</code>, <code>th:xmlspace</code>");
        DOCUMENTATION.put("th:xmlspace", "Sets the <b>xml:space</b> attribute to the result of the expression.<br><br><i>See also:</i> <code>th:xmlbase</code>, <code>th:xmllang</code>");
        DOCUMENTATION.put("layout:decorator", "Specifies the name of the decorator template to apply to a content template.<br>The mechanism for resolving decorator templates is the same as that used by Thymeleaf to resolve pages in the <code>th:fragment</code> and <code>th:include</code> processors.");
        DOCUMENTATION.put("layout:fragment", "Marks sections of the template that can be replaced by sections in the content template (if decorating) or passed along to included pages (if including), which share the same name.<br><br>Cannot appear in tag(s): <code>title</code>");
        DOCUMENTATION.put("layout:include", "Similar to Thymeleaf's <code>th:include</code>, but allows the passing of entire element fragments to the included template. Useful if you have some HTML that you want to reuse, but whose contents are too complex to determine or construct with context variables alone.");
        DOCUMENTATION.put("layout:replace", "Similar to Thymeleaf's <code>th:replace</code>, but allows the passing of entire element fragments to the included template. Useful if you have some HTML that you want to reuse, but whose contents are too complex to determine or construct with context variables alone.");

        DOCUMENTATION.put("data-th-alt", DOCUMENTATION.get("th:alt"));
        DOCUMENTATION.put("data-th-alt-title", DOCUMENTATION.get("th:alt-title"));
        DOCUMENTATION.put("data-th-assert", DOCUMENTATION.get("th:assert"));
        DOCUMENTATION.put("data-th-attr", DOCUMENTATION.get("th:attr"));
        DOCUMENTATION.put("data-th-attrappend", DOCUMENTATION.get("th:attrappend"));
        DOCUMENTATION.put("data-th-attrprepend", DOCUMENTATION.get("th:attrprepend"));
        DOCUMENTATION.put("data-th-case", DOCUMENTATION.get("th:case"));
        DOCUMENTATION.put("data-th-classappend", DOCUMENTATION.get("th:classappend"));
        DOCUMENTATION.put("data-th-each", DOCUMENTATION.get("th:each"));
        DOCUMENTATION.put("data-th-fragment", DOCUMENTATION.get("th:fragment"));
        DOCUMENTATION.put("data-th-if", DOCUMENTATION.get("th:if"));
        DOCUMENTATION.put("data-th-include", DOCUMENTATION.get("th:include"));
        DOCUMENTATION.put("data-th-inline", DOCUMENTATION.get("th:inline"));
        DOCUMENTATION.put("data-th-insert", DOCUMENTATION.get("th:insert"));
        DOCUMENTATION.put("data-th-lang", DOCUMENTATION.get("th:lang"));
        DOCUMENTATION.put("data-th-lang-xmllang", DOCUMENTATION.get("th:lang-xmllang"));
        DOCUMENTATION.put("data-th-object", DOCUMENTATION.get("th:object"));
        DOCUMENTATION.put("data-th-remove", DOCUMENTATION.get("th:remove"));
        DOCUMENTATION.put("data-th-replace", DOCUMENTATION.get("th:replace"));
        DOCUMENTATION.put("data-th-styleappend", DOCUMENTATION.get("th:styleappend"));
        DOCUMENTATION.put("data-th-substituteby", DOCUMENTATION.get("th:substituteby"));
        DOCUMENTATION.put("data-th-switch", DOCUMENTATION.get("th:switch"));
        DOCUMENTATION.put("data-th-text", DOCUMENTATION.get("th:text"));
        DOCUMENTATION.put("data-th-title", DOCUMENTATION.get("th:title"));
        DOCUMENTATION.put("data-th-unless", DOCUMENTATION.get("th:unless"));
        DOCUMENTATION.put("data-th-utext", DOCUMENTATION.get("th:utext"));
        DOCUMENTATION.put("data-th-with", DOCUMENTATION.get("th:with"));
        DOCUMENTATION.put("data-th-xmlbase", DOCUMENTATION.get("th:xmlbase"));
        DOCUMENTATION.put("data-th-xmllang", DOCUMENTATION.get("th:xmllang"));
        DOCUMENTATION.put("data-th-xmlspace", DOCUMENTATION.get("th:xmlspace"));
        DOCUMENTATION.put("data-layout-decorator", DOCUMENTATION.get("layout:decorator"));
        DOCUMENTATION.put("data-layout-fragment", DOCUMENTATION.get("layout:fragment"));
        DOCUMENTATION.put("data-layout-include", DOCUMENTATION.get("layout:include"));
        DOCUMENTATION.put("data-layout-replace", DOCUMENTATION.get("layout:replace"));
    }

    ;

    /**
     *  Returns array containing Thymeleaf attributes.
     * @return List of attributes.
     */
    public static List<String> getThymeleafAttributes() {
        return Arrays.asList(THYMELEAF_ATTRIBUTES);
    }

    /**
     * Returns array containing Thymeleaf methods.
     *
     * @return List of methods.
     */
    public static List<String> getThymeleafMethods() {
        return Arrays.asList(THYMELEAF_METHODS);
    }

    /**
     * Returns description for given Thymeleaf attribute.
     *
     * @param attribute for which we need documentation
     * @return String containing documentation description
     */
    public static String getDoc(String attribute) {
        return DOCUMENTATION.get(attribute);
    }

}
